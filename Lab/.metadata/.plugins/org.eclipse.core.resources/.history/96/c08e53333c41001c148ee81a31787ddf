// RSLK Self Test via UART

/* This example accompanies the books
   "Embedded Systems: Introduction to the MSP432 Microcontroller",
       ISBN: 978-1512185676, Jonathan Valvano, copyright (c) 2017
   "Embedded Systems: Real-Time Interfacing to the MSP432 Microcontroller",
       ISBN: 978-1514676585, Jonathan Valvano, copyright (c) 2017
   "Embedded Systems: Real-Time Operating Systems for ARM Cortex-M Microcontrollers",
       ISBN: 978-1466468863, , Jonathan Valvano, copyright (c) 2017
 For more information about my classes, my research, and my books, see
 http://users.ece.utexas.edu/~valvano/

Simplified BSD License (FreeBSD License)
Copyright (c) 2017, Jonathan Valvano, All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are
those of the authors and should not be interpreted as representing official
policies, either expressed or implied, of the FreeBSD Project.
*/

#include "msp.h"
#include <stdint.h>
#include <string.h>
#include "..\inc\UART0.h"
#include "..\inc\EUSCIA0.h"
#include "..\inc\FIFO0.h"
#include "..\inc\Clock.h"
//#include "..\inc\SysTick.h"
#include "..\inc\SysTickInts.h"
#include "..\inc\CortexM.h"
#include "..\inc\TimerA1.h"
//#include "..\inc\Bump.h"
#include "..\inc\BumpInt.h"
#include "..\inc\LaunchPad.h"
#include "..\inc\Motor.h"
#include "../inc/IRDistance.h"
#include "../inc/ADC14.h"
#include "../inc/LPF.h"
#include "..\inc\Reflectance.h"
#include "../inc/TA3InputCapture.h"
#include "../inc/Tachometer.h"

#define P2_4 (*((volatile uint8_t *)(0x42098070)))
#define P2_3 (*((volatile uint8_t *)(0x4209806C)))
#define P2_2 (*((volatile uint8_t *)(0x42098068)))
#define P2_1 (*((volatile uint8_t *)(0x42098064)))
#define P2_0 (*((volatile uint8_t *)(0x42098060)))

uint8_t CollisionData, CollisionFlag, Start_Bumper_Test=0;  // mailbox
void HandleCollision(uint8_t bumpSensor){


   CollisionData = bumpSensor;
    if(Start_Bumper_Test){
        switch(bumpSensor){
           case 0x3E:
               EUSCIA0_OutString("Bumper Switch 1"); EUSCIA0_OutChar(CR); EUSCIA0_OutChar(LF);
               break;
           case 0x3D:
               EUSCIA0_OutString("Bumper Switch 2"); EUSCIA0_OutChar(CR); EUSCIA0_OutChar(LF);
               break;
           case 0x3B:
               EUSCIA0_OutString("Bumper Switch 3"); EUSCIA0_OutChar(CR); EUSCIA0_OutChar(LF);
               break;
           case 0x37:
               EUSCIA0_OutString("Bumper Switch 4"); EUSCIA0_OutChar(CR); EUSCIA0_OutChar(LF);
               break;
           case 0x2F:
               EUSCIA0_OutString("Bumper Switch 5"); EUSCIA0_OutChar(CR); EUSCIA0_OutChar(LF);
               break;
           case 0x1F:
               EUSCIA0_OutString("Bumper Switch 6"); EUSCIA0_OutChar(CR); EUSCIA0_OutChar(LF);
               Start_Bumper_Test=0;
               break;
       }
    }

   CollisionFlag = 1;
   P4->IFG &= ~0xED;                  // clear flag4 and flag1 (reduce possibility of extra interrupt)
}

void RSLK_Reset(void){
    DisableInterrupts();
    Clock_Init48MHz();  // makes SMCLK=12 MHz
    Motor_Init();
    Motor_Stop();
    LaunchPad_Init();
    BumpInt_Init(&HandleCollision);
    EUSCIA0_Init();     // initialize UART
    EnableInterrupts();
}

void Motor_Test(void){
    Motor_Stop();
    EUSCIA0_OutString("Motor Test"); EUSCIA0_OutChar(CR); EUSCIA0_OutChar(LF);
    EUSCIA0_OutString("Motor Forward, press any key to proceed..."); EUSCIA0_OutChar(CR); EUSCIA0_OutChar(LF);
    EUSCIA0_InChar();
    Motor_Forward(3000,3000);
    Clock_Delay1ms(2000);
    Motor_Stop();
    EUSCIA0_OutString("Motor Backward, press any key to proceed..."); EUSCIA0_OutChar(CR); EUSCIA0_OutChar(LF);
    EUSCIA0_InChar();
    Motor_Backward(3000,3000);
    Clock_Delay1ms(2000);
    Motor_Stop();
    EUSCIA0_OutString("Left Motor Forward, press any key to proceed..."); EUSCIA0_OutChar(CR); EUSCIA0_OutChar(LF);
    EUSCIA0_InChar();
    Motor_Forward(3000,0);
    Clock_Delay1ms(2000);
    Motor_Stop();
    EUSCIA0_OutString("Right Motor Backward, press any key to proceed..."); EUSCIA0_OutChar(CR); EUSCIA0_OutChar(LF);
    EUSCIA0_InChar();
    Motor_Backward(0,3000);
    Clock_Delay1ms(2000);
    Motor_Stop();
    EUSCIA0_OutString("Motor Test Complete"); EUSCIA0_OutChar(CR); EUSCIA0_OutChar(LF);
}

//**************ADC_ISR*******************
volatile uint32_t nr,nc,nl;
volatile uint32_t ADCvalue;
volatile uint32_t ADCflag;

void SampleADC_ISR(void){  // runs at 2000 Hz
  uint32_t raw17,raw12,raw16;
  P1OUT ^= 0x01;         // profile
  P1OUT ^= 0x01;         // profile
  ADC_In17_12_16(&raw17,&raw12,&raw16);  // sample
  nr = LPF_Calc(raw17);  // right is channel 17 P9.0
  nc = LPF_Calc2(raw12); // center is channel 12, P4.1
  nl = LPF_Calc3(raw16); // left is channel 16, P9.1
  ADCflag = 1;           // semaphore
  P1OUT ^= 0x01;         // profile
}
void IRSensor_Init(void){
    uint32_t raw17,raw12,raw16;
    uint32_t s;
    ADCflag = 0;
    s = 256; // replace with your choice
    ADC0_InitSWTriggerCh17_12_16();   // initialize channels 17,12,16
    ADC_In17_12_16(&raw17,&raw12,&raw16);  // sample
    LPF_Init(raw17,s);     // P9.0/channel 17
    LPF_Init2(raw12,s);    // P4.1/channel 12
    LPF_Init3(raw16,s);    // P9.1/channel 16
    TimerA1_Init(&SampleADC_ISR,250);    // 2000 Hz sampling
}

void IRSensor_Test(void){

    uint32_t nlDistance=0, ncDistance=0, nrDistance=0;
    uint32_t n;
    EUSCIA0_OutString("IR Sensor Test. Reset MSP432 to exit"); EUSCIA0_OutChar(CR); EUSCIA0_OutChar(LF);

    while(1){
      for(n=0; n<2000; n++){
        while(ADCflag == 0){};
        ADCflag = 0; // show every 2000th point
      }
      nlDistance = LeftConvert(nl);
      ncDistance = CenterConvert(nc);
      nrDistance = RightConvert(nr);
      EUSCIA0_OutString(" Left = ");  EUSCIA0_OutUDec(nlDistance);
      EUSCIA0_OutString(", Center = ");  EUSCIA0_OutUDec(ncDistance);
      EUSCIA0_OutString(", Right = ");  EUSCIA0_OutUDec(nrDistance);
      EUSCIA0_OutChar(CR);
    }
}

void Bumper_Init(void){
    BumpInt_Init(&HandleCollision);
}

void Bumper_Test(void){
    Start_Bumper_Test=1;
    EUSCIA0_OutString("Bumper Test"); EUSCIA0_OutChar(CR); EUSCIA0_OutChar(LF);
    EUSCIA0_OutString("Press on each Bump Switch to check for connectivity"); EUSCIA0_OutChar(CR); EUSCIA0_OutChar(LF);
    while(Start_Bumper_Test){
        WaitForInterrupt();
    }
    EUSCIA0_OutString("End of Bumper Test"); EUSCIA0_OutChar(CR); EUSCIA0_OutChar(LF);
}

// Systick ISR used on ReflectanceSensor Readings
volatile uint8_t reflectance_data;
void SysTick_Handler(void){ // every 1ms
  // write this as part of Lab 10
    volatile static uint8_t count=0;
    if(count==0){
        Reflectance_Start();
    }
    else if (count==1) {
        reflectance_data =  Reflectance_End();
    }
    count++;
    if(count==10)count=0;
}

void ReflectanceSensor_Init(void){
    Reflectance_Init();
}

void ReflectanceSensor_Test(void){
    static uint32_t MainCount=0;

    EUSCIA0_OutString("Reflectance Sensor Test, reset MSP432 to exit"); EUSCIA0_OutChar(CR); EUSCIA0_OutChar(LF);
    while(1){
        WaitForInterrupt();
        if(MainCount%1000 == 0){
            P2->OUT ^= 0x01; // foreground thread
            EUSCIA0_OutString(" Reflectance Sensor Data = 0x  ");EUSCIA0_OutChar(CR);
            EUSCIA0_OutString(" Reflectance Sensor Data = 0x");  EUSCIA0_OutUHex(reflectance_data);
            EUSCIA0_OutChar(CR);
        }
        MainCount++;
    }

}

uint16_t Period0;              // (1/SMCLK) units = 83.3 ns units
uint16_t First0;               // Timer A3 first edge, P10.4
int Done0=0;                     // set each rising
// max period is (2^16-1)*83.3 ns = 5.4612 ms
// min period determined by time to run ISR, which is about 1 us
void PeriodMeasure0(uint16_t time){
  P2_0 = P2_0^0x01;           // thread profile, P2.0
  Period0 = (time - First0)&0xFFFF; // 16 bits, 83.3 ns resolution
  First0 = time;                   // setup for next
  Done0 = 1;
}
uint16_t Period2;              // (1/SMCLK) units = 83.3 ns units
uint16_t First2;               // Timer A3 first edge, P8.2
int Done2=0;                     // set each rising
// max period is (2^16-1)*83.3 ns = 5.4612 ms
// min period determined by time to run ISR, which is about 1 us
void PeriodMeasure2(uint16_t time){
  P2_2 = P2_2^0x01;           // thread profile, P2.4
  Period2 = (time - First2)&0xFFFF; // 16 bits, 83.3 ns resolution
  First2 = time;                   // setup for next
  Done2 = 1;
}

void Tachometer_Init(void){
    P2->SEL0 &= ~0x10;
    P2->SEL1 &= ~0x10;   // configure P2.4 as GPIO
    P2->DIR |= 0x10;     // P2.4 output
    TimerA3Capture_Init(&PeriodMeasure0,&PeriodMeasure2);
}

#define PERIOD 2000
void Tachometer_Test(void){
    EUSCIA0_OutString("Tachometer Test, reset MSP432 to exit."); EUSCIA0_OutChar(CR); EUSCIA0_OutChar(LF);
    Motor_Forward(3000,3000); // 50%
    while(1){
        P2_4 ^= 0x01;     // create output
        Clock_Delay1us(PERIOD/2);

        WaitForInterrupt();
        //EUSCIA0_OutString(" Period0 = 0x        , Period2 = 0x        ");EUSCIA0_OutChar(CR);
        if(Done0 || Done2){
            EUSCIA0_OutString(" Period0 = 0x");  EUSCIA0_OutUHex(Period0);
            EUSCIA0_OutString(" Period2 = 0x");  EUSCIA0_OutUHex(Period2);
            EUSCIA0_OutChar(CR); //EUSCIA0_OutChar(LF);
            if(Done0) Done0=0; if(Done2)Done2=0;
        }
    }


}

void main_menu(void){

}


// RSLK Self-Test
int main(void) {
  uint32_t cmd=0, menu=0;

  DisableInterrupts();
  Clock_Init48MHz();  // makes SMCLK=12 MHz
  SysTick_Init(48000,2);  // set up SysTick for 1000 Hz interrupts
  Motor_Init();
  Motor_Stop();
  LaunchPad_Init();
  //Bump_Init();
  Bumper_Init();
  IRSensor_Init();
  Tachometer_Init();
  EUSCIA0_Init();     // initialize UART
  EnableInterrupts();

  while(1){                     // Loop forever
      // write this as part of Lab 18
      EUSCIA0_OutChar(CR); EUSCIA0_OutChar(LF);
      EUSCIA0_OutString("RSLK Testing"); EUSCIA0_OutChar(CR); EUSCIA0_OutChar(LF);
      EUSCIA0_OutString("[0] RSLK Reset"); EUSCIA0_OutChar(CR); EUSCIA0_OutChar(LF);
      EUSCIA0_OutString("[1] Motor Test"); EUSCIA0_OutChar(CR); EUSCIA0_OutChar(LF);
      EUSCIA0_OutString("[2] IR Sensor Test"); EUSCIA0_OutChar(CR); EUSCIA0_OutChar(LF);
      EUSCIA0_OutString("[3] Bumper Test"); EUSCIA0_OutChar(CR); EUSCIA0_OutChar(LF);
      EUSCIA0_OutString("[4] Reflectance Sensor Test"); EUSCIA0_OutChar(CR); EUSCIA0_OutChar(LF);
      EUSCIA0_OutString("[5] Tachometer Test"); EUSCIA0_OutChar(CR); EUSCIA0_OutChar(LF);

      EUSCIA0_OutString("CMD: ");
      cmd=EUSCIA0_InUDec();
      EUSCIA0_OutChar(CR); EUSCIA0_OutChar(LF);

      switch(cmd){
          case 0:
              RSLK_Reset();
              menu =1;
              break;
          case 1:
              Motor_Test();
              menu=1;
              break;
          case 2:
              IRSensor_Test();
              menu=1;
              break;
          case 3:
              Bumper_Test();
              menu=1;
              break;
          case 4:
              ReflectanceSensor_Test();
              menu=1;
              break;
          case 5:
              Tachometer_Test();
              menu=1;
              break;
          default:
              menu=1;
              break;

      }

      if(!menu)Clock_Delay1ms(3000);
      else{
          menu=0;
      }
      Motor_Stop();
      //Clock_Delay1ms(1000);
      //EUSCIA0_Init();

  }
}
